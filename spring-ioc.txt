Spring：
    简介：Spring是一个轻量级开源框架，由Rod Johnson创建。Spring是一个开放源代码的设计层面框架，
         它解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。
         Spring是一个开源容器框架，它集成各类型的工具，通过核心的Bean factory实现了底层的类的实例化和生命周期的管理。
         在整个框架中，各类型的功能被抽象成一个个的 Bean，这样就可以实现各种功能的管理，包括动态加载和切面编程。

    Spring优势：
        方便解耦，简化开发。
        AOP 编程的支持。
        声明式事务的支持。
        方便集成各种优秀框架。

    Spring-Ioc：
        前提问题：
            Ioc的作用？     降低耦合。
            什么是耦合？    定义： 耦合是对模块间关联程度的度量，耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。
                                 模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，
                                 同时表明其独立性越差( 降低耦合性，可以提高其独立性）。

                           总结：耦合就是程序模块间的关联程度、相互调用程度、依赖关系。

            耦合Demo：spring-coupling-managment    --》     spring-coupling-demo
                    耦合点：
                        controller 依赖 service
                        service 依赖 mapper

                    如何解决：
                        使用反射来创建对象，而避免使用new关键字。
                        通过读取配置文件来获取要创建的对象全限定类名。

                        解决Demo：spring-no-coupling-demo（暂时并未使用Spring）
                            解决思路：创建 BeanFactory：用于 创建对象。
                                     同时将 配置文件 独立出来。

                            还有什么问题：？
                                重复性根据 beanName 创建,每次都是需要时才去创建。

                                如何解决：在类加载的时候一次行，将 需要创建的对象统统创建出来,然后在对象需要被调用的时候，直接使用。

                                解决Demo：spring-no-coupling-x-demo（暂时并未使用Spring）

            总结：如何降低耦合？
                减少模块之间的依赖、调用关系。尽可能将每一个模块组件化，同时使每一个组件尽可能的高可用。

    Spring-Ioc：
        问题？
            什么是IOC?
                定义：Ioc-Inversion of Control，控制反转。不是一种技术，而是一种思想，Ioc 和 Spring 绑定在一起，是由于 Spring 率先实现了 Ioc .
                        传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，有了IoC容器后，把创建和查找依赖对象的控制权
                        交给了容器，由容器进行注入对象(DI),所以对象与对象之间的耦合大大的降低了。使得程序的整个体系结构变得非常灵活,这样有利于
                        项目的后期二次开发和扩展。

            为什么称 Ioc 是一个容器？
                解释：Spring 中一切都以<bean>标签进行管理，每一个bean都代表一个组件，而Ioc负责这些组件何时被创建、生命周期、作用域、管理... 所以称 Ioc是一个容器。

            什么是DI？
                定义：DI—Dependency Injection,依赖注入，即 在传统应用项目中，我们如果需要使用另一个对象，就直接在其内部直接引用，但是现在我们将
                        创建对象的控制权交给了Ioc容器，而Ioc可以将 我们所需要的对象（也就是所谓的依赖对象，在我们需要使用之前，就已经为我们创建好了），
                        然后由 Ioc 统一将 这些依赖对象注入需要他们的类中。

            Spring-Bean的三种创建方式？
                无参构造创建：
                        参考Demo: spring-ioc-managment    -->     spring-ioc-con-demo

                factory创建：
                        参考Demo：spring-ioc-managment     -->     spring-ioc-factory-demo

                static-factory创建:
                        参考Demo: spring-ioc-managment    -->     spring-ioc-static-factory-demo





























































